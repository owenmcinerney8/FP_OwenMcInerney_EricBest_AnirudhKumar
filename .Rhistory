#1. How common are charging stations?
#   Answer: We will use the study in (4) to create a map of charging stations and then analyze the data
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
#3. Which vehicles are the most cost-efficient when compared with traditional ICE cars?
#   Answer: We must find a dataset which discusses these economic factors.
#---------------------
#-Data Visualizations-
#---------------------
##1.
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## We need 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVgovcharge.csv")
EVgovcharge <- read.csv(csv_path)
## Data Tidying
## The station names are easily extracted.
stationNames <- EVgovcharge$Station.Name
## The station's latitude and longitude aren't as easy
## The dataset formats the coordinates as follows: POINT (-72.773473 41.527367)
## We need to remove POINT, the spaces, and the parentheses.
stationCoord <- EVgovcharge$New.Georeferenced.Column
latitude_raw <- numeric(nrow(EVgovcharge))
longitude_raw <- numeric(nrow(EVgovcharge))
for (i in 1:nrow(EVgovcharge))
{
## Change the case's coordinates field to a string
coordinates <- as.character(EVgovcharge$New.Georeferenced.Column[i])
## We make an array called extracted_numbers that will contain the pertinent coordinates
## Use "gsub" on coordinates, which will remove remove any character that is not a number, a period, or a minus sign
## "[^0-9.-]" is a regular expression from Java that will define that removal of characters, as per coordinate system specifications
## Also given to gsub is " "
## "sub" is not good enough because it will only change out the first occurrence that goes against the above
## We then pipe that argument to strsplit with another regular expression called "\\s+", a regex from Java that matches one or more whitespace characters
## strsplit converts the coordinates string above into a vector of substrings
## unlist converts those characters into one vector
## as.numeric turns those into a number to be used with Leaflet
extracted_numbers <- coordinates %>%
gsub("[^0-9.-]", " ", coordinates) %>%
strsplit("\\s+") %>%
unlist() %>%
as.numeric()
##print(extracted_numbers)
## This is a
longitude_raw[i] <- extracted_numbers[2]  # Second number is longitude
latitude_raw[i] <- extracted_numbers[3]  # Third number is latitude
}
name <- stationNames
latitude <- latitude_raw
longitude <- longitude_raw
# Create a data frame with station coordinates and names
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(data = station_data) %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4) %>%  # Center the map around the USA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)  # Add markers using longitude, latitude, and station names as popups
# Display the map
EVchargemap
#Raw R Code for our data exploration questions:
#----------------------------
#-Data Exploration Questions-
#----------------------------
#1. How common are charging stations?
#   Answer: We will use the study in (4) to create a map of charging stations and then analyze the data
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
#3. Which vehicles are the most cost-efficient when compared with traditional ICE cars?
#   Answer: We must find a dataset which discusses these economic factors.
#---------------------
#-Data Visualizations-
#---------------------
##1.
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## We need 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVgovcharge.csv")
EVgovcharge <- read.csv(csv_path)
## Data Tidying
## The station names are easily extracted.
stationNames <- EVgovcharge$Station.Name
## The station's latitude and longitude aren't as easy
## The dataset formats the coordinates as follows: POINT (-72.773473 41.527367)
## We need to remove POINT, the spaces, and the parentheses.
stationCoord <- EVgovcharge$New.Georeferenced.Column
latitude_raw <- numeric(nrow(EVgovcharge))
longitude_raw <- numeric(nrow(EVgovcharge))
for (i in 1:nrow(EVgovcharge))
{
## Change the case's coordinates field to a string
coordinates <- as.character(EVgovcharge$New.Georeferenced.Column[i])
## We make an array called extracted_numbers that will contain the pertinent coordinates
## Use "gsub" on coordinates, which will remove remove any character that is not a number, a period, or a minus sign
## "[^0-9.-]" is a regular expression from Java that will define that removal of characters, as per coordinate system specifications
## Also given to gsub is " "
## "sub" is not good enough because it will only change out the first occurrence that goes against the above
## We then pipe that argument to strsplit with another regular expression called "\\s+", a regex from Java that matches one or more whitespace characters
## strsplit converts the coordinates string above into a vector of substrings
## unlist converts those characters into one vector
## as.numeric turns those into a number to be used with Leaflet
extracted_numbers <- coordinates %>%
gsub("[^0-9.-]", " ", extracted_numbers) %>%
strsplit("\\s+") %>%
unlist() %>%
as.numeric()
##print(extracted_numbers)
## This is a
longitude_raw[i] <- extracted_numbers[2]  # Second number is longitude
latitude_raw[i] <- extracted_numbers[3]  # Third number is latitude
}
name <- stationNames
latitude <- latitude_raw
longitude <- longitude_raw
# Create a data frame with station coordinates and names
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(data = station_data) %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4) %>%  # Center the map around the USA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)  # Add markers using longitude, latitude, and station names as popups
# Display the map
EVchargemap
#Raw R Code for our data exploration questions:
#----------------------------
#-Data Exploration Questions-
#----------------------------
#1. How common are charging stations?
#   Answer: We will use the study in (4) to create a map of charging stations and then analyze the data
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
#3. Which vehicles are the most cost-efficient when compared with traditional ICE cars?
#   Answer: We must find a dataset which discusses these economic factors.
#---------------------
#-Data Visualizations-
#---------------------
##1.
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## We need 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVgovcharge.csv")
EVgovcharge <- read.csv(csv_path)
## Data Tidying
## The station names are easily extracted.
stationNames <- EVgovcharge$Station.Name
## The station's latitude and longitude aren't as easy
## The dataset formats the coordinates as follows: POINT (-72.773473 41.527367)
## We need to remove POINT, the spaces, and the parentheses.
stationCoord <- EVgovcharge$New.Georeferenced.Column
latitude_raw <- numeric(nrow(EVgovcharge))
longitude_raw <- numeric(nrow(EVgovcharge))
for (i in 1:nrow(EVgovcharge))
{
## Change the case's coordinates field to a string
coordinates <- as.character(EVgovcharge$New.Georeferenced.Column[i])
## We make an array called extracted_numbers that will contain the pertinent coordinates
## Use "gsub" on coordinates, which will remove remove any character that is not a number, a period, or a minus sign
## "[^0-9.-]" is a regular expression from Java that will define that removal of characters, as per coordinate system specifications
## Also given to gsub is " "
## "sub" is not good enough because it will only change out the first occurrence that goes against the above
## We then pipe that argument to strsplit with another regular expression called "\\s+", a regex from Java that matches one or more whitespace characters
## strsplit converts the coordinates string above into a vector of substrings
## unlist converts those characters into one vector
## as.numeric turns those into a number to be used with Leaflet
extracted_numbers <- coordinates %>%
gsub("[^0-9.-]", " ", .) %>%
strsplit("\\s+") %>%
unlist() %>%
as.numeric()
##print(extracted_numbers)
## This is a
longitude_raw[i] <- extracted_numbers[2]  # Second number is longitude
latitude_raw[i] <- extracted_numbers[3]  # Third number is latitude
}
name <- stationNames
latitude <- latitude_raw
longitude <- longitude_raw
# Create a data frame with station coordinates and names
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(data = station_data) %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4) %>%  # Center the map around the USA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)  # Add markers using longitude, latitude, and station names as popups
# Display the map
EVchargemap
#Raw R Code for our data exploration questions:
#----------------------------
#-Data Exploration Questions-
#----------------------------
#1. How common are charging stations?
#   Answer: We will use the study in (4) to create a map of charging stations and then analyze the data
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
#3. Which vehicles are the most cost-efficient when compared with traditional ICE cars?
#   Answer: We must find a dataset which discusses these economic factors.
#---------------------
#-Data Visualizations-
#---------------------
##1.
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## We need 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVgovcharge.csv")
EVgovcharge <- read.csv(csv_path)
## Data Tidying
## The station names are easily extracted.
stationNames <- EVgovcharge$Station.Name
## The station's latitude and longitude aren't as easy
## The dataset formats the coordinates as follows: POINT (-72.773473 41.527367)
## We need to remove POINT, the spaces, and the parentheses.
stationCoord <- EVgovcharge$New.Georeferenced.Column
latitude_raw <- numeric(nrow(EVgovcharge))
longitude_raw <- numeric(nrow(EVgovcharge))
for (i in 1:nrow(EVgovcharge))
{
## Change the case's coordinates field to a string
coordinates <- as.character(EVgovcharge$New.Georeferenced.Column[i])
## We make an array called extracted_numbers that will contain the pertinent coordinates
## Use "gsub" on coordinates, which will remove remove any character that is not a number, a period, or a minus sign
## "[^0-9.-]" is a regular expression from Java that will define that removal of characters, as per coordinate system specifications
## Also given to gsub is " " to remove any non-numbers
## We then pipe that argument to strsplit with another regular expression called "\\s+", a regex from Java that matches one or more whitespace characters
## strsplit converts the coordinates string above into a vector of substrings
## unlist converts those characters into one vector
## as.numeric turns those into a number to be used with Leaflet
extracted_numbers <- coordinates %>%
#gsub("[^0-9.-]", " ", .) %>%#
strsplit("\\s+") %>%
unlist() %>%
as.numeric()
##print(extracted_numbers)
## This is a
longitude_raw[i] <- extracted_numbers[2]  # Second number is longitude
latitude_raw[i] <- extracted_numbers[3]  # Third number is latitude
}
name <- stationNames
latitude <- latitude_raw
longitude <- longitude_raw
# Create a data frame with station coordinates and names
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(data = station_data) %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4) %>%  # Center the map around the USA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)  # Add markers using longitude, latitude, and station names as popups
# Display the map
EVchargemap
#Raw R Code for our data exploration questions:
#----------------------------
#-Data Exploration Questions-
#----------------------------
#1. How common are charging stations?
#   Answer: We will use the study in (4) to create a map of charging stations and then analyze the data
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
#3. Which vehicles are the most cost-efficient when compared with traditional ICE cars?
#   Answer: We must find a dataset which discusses these economic factors.
#---------------------
#-Data Visualizations-
#---------------------
##1.
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## We need 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVgovcharge.csv")
EVgovcharge <- read.csv(csv_path)
## Data Tidying
## The station names are easily extracted.
stationNames <- EVgovcharge$Station.Name
## The station's latitude and longitude aren't as easy
## The dataset formats the coordinates as follows: POINT (-72.773473 41.527367)
## We need to remove POINT, the spaces, and the parentheses.
stationCoord <- EVgovcharge$New.Georeferenced.Column
latitude_raw <- numeric(nrow(EVgovcharge))
longitude_raw <- numeric(nrow(EVgovcharge))
for (i in 1:nrow(EVgovcharge))
{
## Change the case's coordinates field to a string
coordinates <- as.character(EVgovcharge$New.Georeferenced.Column[i])
## We make an array called extracted_numbers that will contain the pertinent coordinates
## Use "gsub" on coordinates, which will remove remove any character that is not a number, a period, or a minus sign
## "[^0-9.-]" is a regular expression from Java that will define that removal of characters, as per coordinate system specifications
## Also given to gsub is " " to remove any non-numbers
## We then pipe that argument to strsplit with another regular expression called "\\s+", a regex from Java that matches one or more whitespace characters
## strsplit converts the coordinates string above into a vector of substrings
## unlist converts those characters into one vector
## as.numeric turns those into a number to be used with Leaflet
extracted_numbers <- coordinates %>%
gsub("[^0-9.-]", " ", .) %>%
strsplit("\\s+") %>%
unlist() %>%
as.numeric()
##print(extracted_numbers)
## This is a
longitude_raw[i] <- extracted_numbers[2]  # Second number is longitude
latitude_raw[i] <- extracted_numbers[3]  # Third number is latitude
}
name <- stationNames
latitude <- latitude_raw
longitude <- longitude_raw
# Create a data frame with station coordinates and names
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(data = station_data) %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4) %>%  # Center the map around the USA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)  # Add markers using longitude, latitude, and station names as popups
# Display the map
EVchargemap
#Raw R Code for our data exploration questions:
#----------------------------
#-Data Exploration Questions-
#----------------------------
#1. How common are charging stations?
#   Answer: We will use the study in (4) to create a map of charging stations and then analyze the data
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
#3. Which vehicles are the most cost-efficient when compared with traditional ICE cars?
#   Answer: We must find a dataset which discusses these economic factors.
#---------------------
#-Data Visualizations-
#---------------------
##1.
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## We need 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVgovcharge.csv")
EVgovcharge <- read.csv(csv_path)
## Data Tidying
## The station names are easily extracted.
stationNames <- EVgovcharge$Station.Name
## The station's latitude and longitude aren't as easy
## The dataset formats the coordinates as follows: POINT (-72.773473 41.527367)
## We need to remove POINT, the spaces, and the parentheses.
stationCoord <- EVgovcharge$New.Georeferenced.Column
latitude_raw <- numeric(nrow(EVgovcharge))
longitude_raw <- numeric(nrow(EVgovcharge))
for (i in 1:nrow(EVgovcharge))
{
## Change the case's coordinates field to a string
coordinates <- as.character(EVgovcharge$New.Georeferenced.Column[i])
## We make an array called extracted_numbers that will contain the pertinent coordinates
## Use "gsub" on coordinates, which will remove remove any character that is not a number, a period, or a minus sign
## "[^0-9.-]" is a regular expression from Java that will define that removal of characters, as per coordinate system specifications
## Also given to gsub is " " to remove any non-numbers
## We then pipe that argument to strsplit with another regular expression called "\\s+", a regex from Java that matches one or more whitespace characters
## strsplit converts the coordinates string above into a vector of substrings
## unlist converts those characters into one vector
## as.numeric turns those into a number to be used with Leaflet
extracted_numbers <- coordinates %>%
sub("[^0-9.-]", " ", .) %>%
strsplit("\\s+") %>%
unlist() %>%
as.numeric()
## print(extracted_numbers)
## This is an object with apparent dummy data in the 0th and 1st elements
## Corroborated coordinates with Google Data
longitude_raw[i] <- extracted_numbers[2]  # Second number is longitude
latitude_raw[i] <- extracted_numbers[3]  # Third number is latitude
}
name <- stationNames
latitude <- latitude_raw
longitude <- longitude_raw
# Create a data frame with station coordinates and names
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(data = station_data) %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4) %>%  # Center the map around the USA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)  # Add markers using longitude, latitude, and station names as popups
# Display the map
EVchargemap
#Raw R Code for our data exploration questions:
#----------------------------
#-Data Exploration Questions-
#----------------------------
#1. How common are charging stations?
#   Answer: We will use the study in (4) to create a map of charging stations and then analyze the data
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
#3. Which vehicles are the most cost-efficient when compared with traditional ICE cars?
#   Answer: We must find a dataset which discusses these economic factors.
#---------------------
#-Data Visualizations-
#---------------------
##1.
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## We need 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVgovcharge.csv")
EVgovcharge <- read.csv(csv_path)
## Data Tidying
## The station names are easily extracted.
stationNames <- EVgovcharge$Station.Name
## The station's latitude and longitude aren't as easy
## The dataset formats the coordinates as follows: POINT (-72.773473 41.527367)
## We need to remove POINT, the spaces, and the parentheses.
stationCoord <- EVgovcharge$New.Georeferenced.Column
latitude_raw <- numeric(nrow(EVgovcharge))
longitude_raw <- numeric(nrow(EVgovcharge))
for (i in 1:nrow(EVgovcharge))
{
## Change the case's coordinates field to a string
coordinates <- as.character(EVgovcharge$New.Georeferenced.Column[i])
## We make an array called extracted_numbers that will contain the pertinent coordinates
## Use "gsub" on coordinates, which will remove remove any character that is not a number, a period, or a minus sign
## "[^0-9.-]" is a regular expression from Java that will define that removal of characters, as per coordinate system specifications
## Also given to gsub is " " to remove any non-numbers
## We then pipe that argument to strsplit with another regular expression called "\\s+", a regex from Java that matches one or more whitespace characters
## strsplit converts the coordinates string above into a vector of substrings
## unlist converts those characters into one vector
## as.numeric turns those into a number to be used with Leaflet
extracted_numbers <- coordinates %>%
gsub("[^0-9.-]", " ", .) %>%
strsplit("\\s+") %>%
unlist() %>%
as.numeric()
## print(extracted_numbers)
## This is an object with apparent dummy data in the 0th and 1st elements
## Corroborated coordinates with Google Data
longitude_raw[i] <- extracted_numbers[2]  # Second number is longitude
latitude_raw[i] <- extracted_numbers[3]  # Third number is latitude
}
name <- stationNames
latitude <- latitude_raw
longitude <- longitude_raw
# Create a data frame with station coordinates and names
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(data = station_data) %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4) %>%  # Center the map around the USA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)  # Add markers using longitude, latitude, and station names as popups
# Display the map
EVchargemap
