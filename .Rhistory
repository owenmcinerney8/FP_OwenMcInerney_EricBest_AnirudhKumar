##2.
library(dplyr)
library(ggplot2)
library(knitr)
library(kableExtra)
library(here)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
# Including 'here' functionality for portable code
#csv_path <- here("EVcars.csv")
#EV_range_value_General <- read.csv(csv_path)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
EVcars_tidy <- EVcars %>%
filter(Fuel.ID == 41) %>%
select(Automobile.ID, Fuel, Manufacturer.ID, Manufacturer, Model, Model.Year,Category.ID, Engine.Type, Engine.Size, Transmission.Type, Category, Engine.Size, City.Fuel.Economy.Units, City.Fuel.Economy, Highway.Fuel.Economy.Units, Highway.Fuel.Economy) # select necessary components
EVcars_mpge <- EVcars_tidy %>%
filter(City.Fuel.Economy.Units == 'mpge') # filters to cases where fuel economy is measured in mpge and is a sedan/wagon
funx <- list(
min = ~min(.x, na.rm = TRUE),
Q1 = ~quantile(.x, probs = 0.20, na.rm = TRUE),
Q2 = ~quantile(.x, probs = 0.40, na.rm = TRUE),
median = ~median(.x, na.rm = TRUE),
Q3 = ~quantile(.x, probs = 0.60, na.rm = TRUE),
Q4 = ~quantile(.x, probs = 0.80, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE),
mean = ~mean(.x, na.rm = TRUE),
std = ~sd(.x, na.rm = TRUE)
)
EVcars_mpge_CityHighway_FiveNumSum <- EVcars_mpge %>%
group_by(Category) %>%
select(Category, City.Fuel.Economy, Highway.Fuel.Economy) %>%
summarize(
across(
.cols=where(is.numeric),
.fns = funx),
count =n()
)
EVcars_mpge_CityHighway_FiveNumSum %>%
kable() %>%
kableExtra::kable_classic()
esquisser(data = EVcars_mpge, viewer = getOption(x, default = "dialog"))
library(here)
library(readr)
library(ggplot2)
# Read the data from the CSV file - traditional way
#EV_range_value_General <- read_csv("~/Downloads/EV_range_value_General.csv")
# Including 'here' functionality for portable code
#csv_path <- here("EV_range_value_General.csv")
#EV_range_value_General <- read.csv(csv_path)
# View the structure of the data to verify column names and types
str(EV_range_value_General)
#---------------------
#-Data Visualizations-
#---------------------
##Please see Notes_and_Ideas.txt for additional data questions and project documentation
##Question 1. How common are charging stations?
#
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVfuelstations.csv")
EVfuelstations <- read.csv(csv_path)
## This dataset includes a column called "Fuel Type Code" that can stand for electric, CNG, etc
## We want to only consider the fuel stations that are ELEC, in Pennsylvania, and for public use
## Private and government charging facilities off limits to the public are not uncommon
filtered_stations <- EVfuelstations %>% filter(Fuel.Type.Code == "ELEC") %>%
filter(State == "PA") %>% filter(Groups.With.Access.Code == 'Public')
num_stations = nrow(filtered_stations)
print("Number of Public EV Charging Stations in PA:")
print(num_stations)
## The station names and coordinates are easily selected
stationNames <- filtered_stations$Station.Name
latitude <- filtered_stations$Latitude
longitude <- filtered_stations$Longitude
## Create a custom data frame with station coordinates and names
## Leaflet is sensitive to large datasets
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(station_data) %>%
setView(lng = -77.8124, lat = 40.86833, zoom = 6) %>%  # Center the map around State College, PA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)
# Display the map
EVchargemap
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
##2.
library(dplyr)
library(ggplot2)
library(knitr)
library(kableExtra)
library(here)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
# Including 'here' functionality for portable code
#csv_path <- here("EVcars.csv")
#EV_range_value_General <- read.csv(csv_path)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
EVcars_tidy <- EVcars %>%
filter(Fuel.ID == 41) %>%
select(Automobile.ID, Fuel, Manufacturer.ID, Manufacturer, Model, Model.Year,Category.ID, Engine.Type, Engine.Size, Transmission.Type, Category, Engine.Size, City.Fuel.Economy.Units, City.Fuel.Economy, Highway.Fuel.Economy.Units, Highway.Fuel.Economy) # select necessary components
EVcars_mpge <- EVcars_tidy %>%
filter(City.Fuel.Economy.Units == 'mpge') # filters to cases where fuel economy is measured in mpge and is a sedan/wagon
funx <- list(
min = ~min(.x, na.rm = TRUE),
Q1 = ~quantile(.x, probs = 0.20, na.rm = TRUE),
Q2 = ~quantile(.x, probs = 0.40, na.rm = TRUE),
median = ~median(.x, na.rm = TRUE),
Q3 = ~quantile(.x, probs = 0.60, na.rm = TRUE),
Q4 = ~quantile(.x, probs = 0.80, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE),
mean = ~mean(.x, na.rm = TRUE),
std = ~sd(.x, na.rm = TRUE)
)
EVcars_mpge_CityHighway_FiveNumSum <- EVcars_mpge %>%
group_by(Category) %>%
select(Category, City.Fuel.Economy, Highway.Fuel.Economy) %>%
summarize(
across(
.cols=where(is.numeric),
.fns = funx),
count =n()
)
EVcars_mpge_CityHighway_FiveNumSum %>%
kable() %>%
kableExtra::kable_classic()
esquisser(data = EVcars_mpge, viewer = getOption(x, default = "dialog"))
library(here)
library(readr)
library(ggplot2)
# Read the data from the CSV file - traditional way
#EV_range_value_General <- read_csv("~/Downloads/EV_range_value_General.csv")
# Including 'here' functionality for portable code
# 'here' needs the file to be in the current directory, in our case, in the Github repository. It needs to be uploaded
#csv_path <- here("EV_range_value_General.csv")
#EV_range_value_General <- read.csv(csv_path)
# View the structure of the data to verify column names and types
str(EV_range_value_General)
### Load Packages
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
pkgs=c('here', 'dplyr', 'dbplyr', 'ggplot2')
groundhog.library(pkgs, groundhog.day)
### Load Data
## Using 'here' for a relative filepath
options(scipen = 999)
csv_path <- here("IEA_EV_SalesHistoricalCars.csv")
EV_Global_Historical_raw <- read.csv(csv_path)
### Wrangle Data
## wrangled data to cases of groups of cars with attributes: year, region, count
EV_production_region_year <- EV_Global_Historical_raw %>%
filter(unit == 'Vehicles', mode == 'Cars', region != "World") %>%
select(region, year, value) %>%
group_by(region, year) %>%
summarise(count = sum(value))
## wrangled data to cases of groups of cars with attributes: year, count
EV_production_global_year <- EV_production_region_year %>%
group_by(year) %>%
summarise(count = sum(count))
### CREATE HISTOGRAM
ggplot(EV_production_global_year, aes(x = year)) +
geom_histogram(bins = 13)
ggplot(EV_production_global_year, aes(x = year, y = count, fill = 'red')) +
geom_col() +
labs(title = "Global Electirc Cars in Use Since 2010",
x = "Year",
y = "Cars") +
theme_classic() +
theme(legend.position = "none")
### Create Summary Table of Top 5 Leading Countries in
EV_usage_region_2019_2022 <- EV_production_region_year %>%
filter(year >= 2019) %>%
group_by(region) %>%
summarise(count = sum(count))
top_5_EV <- head(EV_usage_region_2019_2022[order(EV_usage_region_2019_2022$count, decreasing = TRUE),])
bottom_5_ev <- tail(EV_usage_region_2019_2022[order(EV_usage_region_2019_2022$count, decreasing = TRUE),])
#---------------------
#-Data Visualizations-
#---------------------
##Please see Notes_and_Ideas.txt for additional data questions and project documentation
##Question 1. How common are charging stations?
#
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVfuelstations.csv")
EVfuelstations <- read.csv(csv_path)
## This dataset includes a column called "Fuel Type Code" that can stand for electric, CNG, etc
## We want to only consider the fuel stations that are ELEC, in Pennsylvania, and for public use
## Private and government charging facilities off limits to the public are not uncommon
filtered_stations <- EVfuelstations %>% filter(Fuel.Type.Code == "ELEC") %>%
filter(State == "PA") %>% filter(Groups.With.Access.Code == 'Public')
## Printing the number of stations in Pennsylvania
num_stations = nrow(filtered_stations)
print("Number of Public EV Charging Stations in PA:")
print(num_stations)
## The station names and coordinates are easily selected
stationNames <- filtered_stations$Station.Name
latitude <- filtered_stations$Latitude
longitude <- filtered_stations$Longitude
## Create a custom data frame with station coordinates and names
## Leaflet is sensitive to large datasets
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(station_data) %>%
setView(lng = -77.8124, lat = 40.86833, zoom = 6) %>%  # Center the map around State College, PA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)
# Display the map
EVchargemap
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
##2.
library(dplyr)
library(ggplot2)
library(knitr)
library(kableExtra)
library(here)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
# Including 'here' functionality for portable code
#csv_path <- here("EVcars.csv")
#EV_range_value_General <- read.csv(csv_path)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
EVcars_tidy <- EVcars %>%
filter(Fuel.ID == 41) %>%
select(Automobile.ID, Fuel, Manufacturer.ID, Manufacturer, Model, Model.Year,Category.ID, Engine.Type, Engine.Size, Transmission.Type, Category, Engine.Size, City.Fuel.Economy.Units, City.Fuel.Economy, Highway.Fuel.Economy.Units, Highway.Fuel.Economy) # select necessary components
EVcars_mpge <- EVcars_tidy %>%
filter(City.Fuel.Economy.Units == 'mpge') # filters to cases where fuel economy is measured in mpge and is a sedan/wagon
funx <- list(
min = ~min(.x, na.rm = TRUE),
Q1 = ~quantile(.x, probs = 0.20, na.rm = TRUE),
Q2 = ~quantile(.x, probs = 0.40, na.rm = TRUE),
median = ~median(.x, na.rm = TRUE),
Q3 = ~quantile(.x, probs = 0.60, na.rm = TRUE),
Q4 = ~quantile(.x, probs = 0.80, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE),
mean = ~mean(.x, na.rm = TRUE),
std = ~sd(.x, na.rm = TRUE)
)
EVcars_mpge_CityHighway_FiveNumSum <- EVcars_mpge %>%
group_by(Category) %>%
select(Category, City.Fuel.Economy, Highway.Fuel.Economy) %>%
summarize(
across(
.cols=where(is.numeric),
.fns = funx),
count =n()
)
EVcars_mpge_CityHighway_FiveNumSum %>%
kable() %>%
kableExtra::kable_classic()
esquisser(data = EVcars_mpge, viewer = getOption(x, default = "dialog"))
library(here)
library(readr)
library(ggplot2)
# Read the data from the CSV file - traditional way
#EV_range_value_General <- read_csv("~/Downloads/EV_range_value_General.csv")
# Including 'here' functionality for portable code
# 'here' needs the file to be in the current directory, in our case, in the Github repository. It needs to be uploaded
#csv_path <- here("EV_range_value_General.csv")
#EV_range_value_General <- read.csv(csv_path)
# View the structure of the data to verify column names and types
str(EV_range_value_General)
### Load Packages
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
pkgs=c('here', 'dplyr', 'dbplyr', 'ggplot2')
groundhog.library(pkgs, groundhog.day)
### Load Data
## Using 'here' for a relative filepath
options(scipen = 999)
csv_path <- here("IEA_EV_SalesHistoricalCars.csv")
EV_Global_Historical_raw <- read.csv(csv_path)
### Wrangle Data
## wrangled data to cases of groups of cars with attributes: year, region, count
EV_production_region_year <- EV_Global_Historical_raw %>%
filter(unit == 'Vehicles', mode == 'Cars', region != "World") %>%
select(region, year, value) %>%
group_by(region, year) %>%
summarise(count = sum(value))
## wrangled data to cases of groups of cars with attributes: year, count
EV_production_global_year <- EV_production_region_year %>%
group_by(year) %>%
summarise(count = sum(count))
### CREATE HISTOGRAM
ggplot(EV_production_global_year, aes(x = year)) +
geom_histogram(bins = 13)
ggplot(EV_production_global_year, aes(x = year, y = count, fill = 'red')) +
geom_col() +
labs(title = "Global Electirc Cars in Use Since 2010",
x = "Year",
y = "Cars") +
theme_classic() +
theme(legend.position = "none")
### Create Summary Table of Top 5 Leading Countries in
EV_usage_region_2019_2022 <- EV_production_region_year %>%
filter(year >= 2019) %>%
group_by(region) %>%
summarise(count = sum(count))
top_5_EV <- head(EV_usage_region_2019_2022[order(EV_usage_region_2019_2022$count, decreasing = TRUE),])
bottom_5_ev <- tail(EV_usage_region_2019_2022[order(EV_usage_region_2019_2022$count, decreasing = TRUE),])
#---------------------
#-Data Visualizations-
#---------------------
##Please see Notes_and_Ideas.txt for additional data questions and project documentation
##Question 1. How common are charging stations?
#
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVfuelstations.csv")
EVfuelstations <- read.csv(csv_path)
## This dataset includes a column called "Fuel Type Code" that can stand for electric, CNG, etc
## We want to only consider the fuel stations that are ELEC, in Pennsylvania, and for public use
## Private and government charging facilities off limits to the public are not uncommon
filtered_stations <- EVfuelstations %>% filter(Fuel.Type.Code == "ELEC") %>%
filter(State == "PA") %>% filter(Groups.With.Access.Code == 'Public')
## Printing the number of stations in Pennsylvania
num_stations = nrow(filtered_stations)
print("Number of Public EV Charging Stations in PA:")
print(num_stations)
## The station names and coordinates are easily selected
stationNames <- filtered_stations$Station.Name
latitude <- filtered_stations$Latitude
longitude <- filtered_stations$Longitude
## Create a custom data frame with station coordinates and names
## Leaflet is sensitive to large datasets
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(station_data) %>%
setView(lng = -77.8124, lat = 40.86833, zoom = 6) %>%  # Center the map around State College, PA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)
# Display the map
EVchargemap
#2. What vehicle has the longest excursion time/length on a full-charge?
#   Answer: We will use the study in (3) to analyze this data. Note on electric vehicles:
#   Weather can affect their performance, especially when it's cold.
##2.
library(dplyr)
library(ggplot2)
library(knitr)
library(kableExtra)
library(here)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
# Including 'here' functionality for portable code
#csv_path <- here("EVcars.csv")
#EV_range_value_General <- read.csv(csv_path)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
EVcars_tidy <- EVcars %>%
filter(Fuel.ID == 41) %>%
select(Automobile.ID, Fuel, Manufacturer.ID, Manufacturer, Model, Model.Year,Category.ID, Engine.Type, Engine.Size, Transmission.Type, Category, Engine.Size, City.Fuel.Economy.Units, City.Fuel.Economy, Highway.Fuel.Economy.Units, Highway.Fuel.Economy) # select necessary components
EVcars_mpge <- EVcars_tidy %>%
filter(City.Fuel.Economy.Units == 'mpge') # filters to cases where fuel economy is measured in mpge and is a sedan/wagon
funx <- list(
min = ~min(.x, na.rm = TRUE),
Q1 = ~quantile(.x, probs = 0.20, na.rm = TRUE),
Q2 = ~quantile(.x, probs = 0.40, na.rm = TRUE),
median = ~median(.x, na.rm = TRUE),
Q3 = ~quantile(.x, probs = 0.60, na.rm = TRUE),
Q4 = ~quantile(.x, probs = 0.80, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE),
mean = ~mean(.x, na.rm = TRUE),
std = ~sd(.x, na.rm = TRUE)
)
EVcars_mpge_CityHighway_FiveNumSum <- EVcars_mpge %>%
group_by(Category) %>%
select(Category, City.Fuel.Economy, Highway.Fuel.Economy) %>%
summarize(
across(
.cols=where(is.numeric),
.fns = funx),
count =n()
)
EVcars_mpge_CityHighway_FiveNumSum %>%
kable() %>%
kableExtra::kable_classic()
esquisser(data = EVcars_mpge, viewer = getOption(x, default = "dialog"))
library(here)
library(readr)
library(ggplot2)
# Read the data from the CSV file - traditional way
#EV_range_value_General <- read_csv("~/Downloads/EV_range_value_General.csv")
# Including 'here' functionality for portable code
# 'here' needs the file to be in the current directory, in our case, in the Github repository. It needs to be uploaded
#csv_path <- here("EV_range_value_General.csv")
#EV_range_value_General <- read.csv(csv_path)
# View the structure of the data to verify column names and types
str(EV_range_value_General)
### Load Packages
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
pkgs=c('here', 'dplyr', 'dbplyr', 'ggplot2')
groundhog.library(pkgs, groundhog.day)
### Load Data
## Using 'here' for a relative filepath
options(scipen = 999)
csv_path <- here("IEA_EV_SalesHistoricalCars.csv")
EV_Global_Historical_raw <- read.csv(csv_path)
### Wrangle Data
## wrangled data to cases of groups of cars with attributes: year, region, count
EV_production_region_year <- EV_Global_Historical_raw %>%
filter(unit == 'Vehicles', mode == 'Cars', region != "World") %>%
select(region, year, value) %>%
group_by(region, year) %>%
summarise(count = sum(value))
## wrangled data to cases of groups of cars with attributes: year, count
EV_production_global_year <- EV_production_region_year %>%
group_by(year) %>%
summarise(count = sum(count))
### CREATE HISTOGRAM
ggplot(EV_production_global_year, aes(x = year)) +
geom_histogram(bins = 13)
ggplot(EV_production_global_year, aes(x = year, y = count, fill = 'red')) +
geom_col() +
labs(title = "Global Electirc Cars in Use Since 2010",
x = "Year",
y = "Cars") +
theme_classic() +
theme(legend.position = "none")
### Create Summary Table of Top 5 Leading Countries in
EV_usage_region_2019_2022 <- EV_production_region_year %>%
filter(year >= 2019) %>%
group_by(region) %>%
summarise(count = sum(count))
top_5_EV <- head(EV_usage_region_2019_2022[order(EV_usage_region_2019_2022$count, decreasing = TRUE),])
bottom_5_ev <- tail(EV_usage_region_2019_2022[order(EV_usage_region_2019_2022$count, decreasing = TRUE),])
#---------------------
#-Data Visualizations-
#---------------------
##Please see Notes_and_Ideas.txt for additional data questions and project documentation
##Question 1. How common are charging stations?
#
## Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day="2023-11-20"
## 'here' for using a relative filepath
## 'leaflet' will display the map of charging stations
## 'dplyr' is brought in for tidying data
pkgs=c('here', 'leaflet', 'dplyr')
groundhog.library(pkgs, groundhog.day)
## Using 'here' for a relative filepath
csv_path <- here("EVfuelstations.csv")
EVfuelstations <- read.csv(csv_path)
## This dataset includes a column called "Fuel Type Code" that can stand for electric, CNG, etc
## We want to only consider the fuel stations that are ELEC, in Pennsylvania, and for public use
## Private and government charging facilities off limits to the public are not uncommon
filtered_stations <- EVfuelstations %>% filter(Fuel.Type.Code == "ELEC") %>%
filter(State == "PA") %>% filter(Groups.With.Access.Code == 'Public')
## Printing the number of stations in Pennsylvania
num_stations = nrow(filtered_stations)
print("Number of Public EV Charging Stations in PA:")
print(num_stations)
## The station names and coordinates are easily selected
stationNames <- filtered_stations$Station.Name
latitude <- filtered_stations$Latitude
longitude <- filtered_stations$Longitude
## Create a custom data frame with station coordinates and names
## Leaflet is sensitive to large datasets
station_data <- data.frame(
Name = stationNames,
Latitude = latitude,
Longitude = longitude
)
# Create the leaflet map
EVchargemap <- leaflet(station_data) %>%
setView(lng = -77.8124, lat = 40.86833, zoom = 6) %>%  # Center the map around State College, PA
addTiles() %>%  # Add map tiles as the base layer
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)
# Display the map
EVchargemap
