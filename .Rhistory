# Currently have each month as a given column: need to label columns
colnames(fuel_df)[1] <- "jan"
colnames(fuel_df)[2] <- "feb"
colnames(fuel_df)[3] <- "mar"
colnames(fuel_df)[4] <- "apr"
colnames(fuel_df)[5] <- "may"
colnames(fuel_df)[6] <- "jun"
colnames(fuel_df)[7] <- "jul"
colnames(fuel_df)[8] <- "aug"
colnames(fuel_df)[9] <- "sep"
colnames(fuel_df)[10] <- "oct"
colnames(fuel_df)[11] <- "nov"
colnames(fuel_df)[12] <- "dec"
# To find average mpge for gas and electric
mpge_avg_fuel <- EV_GAS_data %>%
group_by(Fuel) %>%
summarise(mpge_avg = mean(cmb_mpge))
electricity_price_per_mile <- mpge_avg_fuel %>%
filter(Fuel == "Electricity") %>%
select(mpge_avg)
gas_price_per_mile <- mpge_avg_fuel %>%
filter(Fuel == "Gasoline") %>%
select(mpge_avg)
# Make sure they are numeric
electricity_avg_mpge <- as.numeric(electricity_price_per_mile)
gas_avg_mpge <- as.numeric(gas_price_per_mile)
# Add fuel type column to data frame
fuel_df$type <- c("gas", "electricity")
# Need to change cases to months
fuel_df <- fuel_df %>%
pivot_longer(
cols = c(jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec),
names_to = "month",
values_to = "avg_gallon_equaivalent_price"
)
# Making actual dates instead of character dates
dates <- append(
seq(from = as.Date("2022-01-01"), to = as.Date("2022-12-01"), by = "month"),
seq(from = as.Date("2022-01-01"), to = as.Date("2022-12-01"), by = "month")
)
# Add dates column to fuel_df
fuel_df$date <- dates
# do not need month column anymore, want to mutate from avg price per gallon to miles per dollar
fuel_df <- fuel_df %>%
select(type, avg_gallon_equaivalent_price, date) %>%
mutate(miles_per_dollar = case_when(
type == "gas" ~ gas_avg_mpge / avg_gallon_equaivalent_price,
type == "electricity" ~ electricity_avg_mpge / avg_gallon_equaivalent_price
)) %>%
select(date, type, miles_per_dollar)
# Create the leaflet map
EVchargemap <- leaflet(station_data) %>%
setView(lng = -77.8124, lat = 40.86833, zoom = 6) %>%
addTiles() %>%
addMarkers(lat = ~Latitude, lng = ~Longitude, popup = ~Name)
# Display the map
EVchargemap
funx <- list(
min = ~min(.x, na.rm = TRUE),
Q1 = ~quantile(.x, probs = 0.20, na.rm = TRUE),
Q2 = ~quantile(.x, probs = 0.40, na.rm = TRUE),
median = ~median(.x, na.rm = TRUE),
Q3 = ~quantile(.x, probs = 0.60, na.rm = TRUE),
Q4 = ~quantile(.x, probs = 0.80, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE),
mean = ~mean(.x, na.rm = TRUE),
std = ~sd(.x, na.rm = TRUE)
)
EVcars_mpge_CityHighway_FiveNumSum <- EVcars_mpge %>%
group_by(Category) %>%
select(Category, City.Fuel.Economy, Highway.Fuel.Economy) %>%
summarize(
across(
.cols=where(is.numeric),
.fns = funx),
count =n()
)
# Display Table ---------------------------
EVcars_mpge_CityHighway_FiveNumSum %>%
kable() %>%
kableExtra::kable_classic()
esquisser(data = EVcars_mpge, viewer = getOption(x, default = "dialog"))
#---------------------
#-Data Visualizations-
#---------------------
# Please see Q0Notes_and_Ideas.txt for additional data questions and project documentation
# Question 2: What vehicle has the longest excursion time/length on a full-charge?
# Package and Filepath Configuration ---------------------------
library(groundhog)
groundhog.day="2023-11-20"
pkgs=c('dplyr', 'ggplot2', 'knitr', 'here', 'leaflet', 'kableExtra')
groundhog.library(pkgs, groundhog.day)
csv_path <- here("EVcars.csv")
EVcars <- read.csv(csv_path)
# Data Wrangling ---------------------------
EVcars_tidy <- EVcars %>%
filter(Fuel.ID == 41) %>%
select(Automobile.ID, Fuel, Manufacturer.ID, Manufacturer, Model,
Model.Year,Category.ID, Engine.Type, Engine.Size, Transmission.Type,
Category, Engine.Size, City.Fuel.Economy.Units, City.Fuel.Economy,
Highway.Fuel.Economy.Units, Highway.Fuel.Economy)
# filters to cases where fuel economy is measured in mpge and is a sedan/wagon
EVcars_mpge <- EVcars_tidy %>%
filter(City.Fuel.Economy.Units == 'mpge')
# Table Formatting ---------------------------
funx <- list(
min = ~min(.x, na.rm = TRUE),
Q1 = ~quantile(.x, probs = 0.20, na.rm = TRUE),
Q2 = ~quantile(.x, probs = 0.40, na.rm = TRUE),
median = ~median(.x, na.rm = TRUE),
Q3 = ~quantile(.x, probs = 0.60, na.rm = TRUE),
Q4 = ~quantile(.x, probs = 0.80, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE),
mean = ~mean(.x, na.rm = TRUE),
std = ~sd(.x, na.rm = TRUE)
)
EVcars_mpge_CityHighway_FiveNumSum <- EVcars_mpge %>%
group_by(Category) %>%
select(Category, City.Fuel.Economy, Highway.Fuel.Economy) %>%
summarize(
across(
.cols=where(is.numeric),
.fns = funx),
count =n()
)
# Display Table ---------------------------
EVcars_mpge_CityHighway_FiveNumSum %>%
kable() %>%
kableExtra::kable_classic()
esquisser(data = EVcars_mpge, viewer = getOption(x, default = "dialog"))
# use y = reorder(region, +count) to order countries by car ownership
regional_ev_ownership_bar_chart <- ggplot(EV_ownership_region_2019_2022, aes(x = count, y = reorder(region, +count), fill = "red")) +
geom_col() +
scale_x_continuous(limits = c(0, max(EV_ownership_order_by_country$count)), n.breaks = 6) +
labs(
title = "EV Ownership By Region",
subtitle = "Total EVs Owned from 2019 to 2022 for each Region",
x = "Count of Electric Vehicles",
y = "Region"
) +
theme_classic() +
theme(legend.position = "none") # removes legend
source("C:/Users/owenm/Desktop/stat184FP/FP_OwenMcInerney_EricBest_AnirudhKumar/Q4_5GlobalEVUsage.R")
groundhog
# Load Packages --------------------------------------------------------------
# Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day <- "2023-11-20"
pkgs <- c("readxl", "dplyr", "dbplyr", "ggplot2", "tidyverse", "knitr", "kableExtra")
groundhog.library(pkgs, groundhog.day)
# Read Data ---------------------------------------------------------------
gas_prices <- read_excel("bls_gas_prices.xlsx", range = "B11:M11", col_names = FALSE)
electricty_prices <- read_excel("bls_electricity_prices.xlsx", range = "B11:M11", col_names = FALSE)
EV_GAS_data_raw <- read_excel("all_alpha_24.xlsx")
electricty_prices[1:12] <- electricty_prices[1:12] * 33.7 # converts from kWh to kWh equivalent of a gallon
# Currently have each month as a given column: need to label columns
colnames(fuel_df)[1] <- "jan"
colnames(fuel_df)[2] <- "feb"
fuel_df <- full_join(gas_prices, electricty_prices)
# Currently have each month as a given column: need to label columns
colnames(fuel_df)[1] <- "jan"
colnames(fuel_df)[2] <- "feb"
colnames(fuel_df)[3] <- "mar"
colnames(fuel_df)[4] <- "apr"
colnames(fuel_df)[5] <- "may"
colnames(fuel_df)[6] <- "jun"
colnames(fuel_df)[7] <- "jul"
colnames(fuel_df)[8] <- "aug"
colnames(fuel_df)[9] <- "sep"
colnames(fuel_df)[10] <- "oct"
colnames(fuel_df)[11] <- "nov"
colnames(fuel_df)[12] <- "dec"
# To find average mpge for gas and electric
mpge_avg_fuel <- EV_GAS_data %>%
group_by(Fuel) %>%
summarise(mpge_avg = mean(cmb_mpge))
# Load Packages --------------------------------------------------------------
# Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day <- "2023-11-20"
pkgs <- c("readxl", "dplyr", "dbplyr", "ggplot2", "tidyverse", "knitr", "kableExtra")
groundhog.library(pkgs, groundhog.day)
# Read Data --------------------------------------------------------------------
gas_prices <- read_excel("bls_gas_prices.xlsx", range = "B11:M11", col_names = FALSE)
electricty_prices <- read_excel("bls_electricity_prices.xlsx", range = "B11:M11", col_names = FALSE)
EV_GAS_data <- read_excel("all_alpha_24.xlsx")
# Wrangle Data -----------------------------------------------------------------
electricty_prices[1:12] <- electricty_prices[1:12] * 33.7 # converts from kWh to kWh equivalent of a gallon
fuel_df <- full_join(gas_prices, electricty_prices)
# Currently have each month as a given column: need to label columns
colnames(fuel_df)[1] <- "jan"
colnames(fuel_df)[2] <- "feb"
colnames(fuel_df)[3] <- "mar"
colnames(fuel_df)[4] <- "apr"
colnames(fuel_df)[5] <- "may"
colnames(fuel_df)[6] <- "jun"
colnames(fuel_df)[7] <- "jul"
colnames(fuel_df)[8] <- "aug"
colnames(fuel_df)[9] <- "sep"
colnames(fuel_df)[10] <- "oct"
colnames(fuel_df)[11] <- "nov"
colnames(fuel_df)[12] <- "dec"
# To find average mpge for gas and electric
mpge_avg_fuel <- EV_GAS_data %>%
group_by(Fuel) %>%
summarise(mpge_avg = mean(cmb_mpge))
# Load Packages --------------------------------------------------------------
# Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day <- "2023-11-20"
pkgs <- c("readxl", "dplyr", "dbplyr", "ggplot2", "tidyverse", "knitr", "kableExtra")
groundhog.library(pkgs, groundhog.day)
# Read Data --------------------------------------------------------------------
gas_prices <- read_excel("bls_gas_prices.xlsx", range = "B11:M11", col_names = FALSE)
electricty_prices <- read_excel("bls_electricity_prices.xlsx", range = "B11:M11", col_names = FALSE)
EV_GAS_data_raw <- read_excel("all_alpha_24.xlsx")
# Wrangle Data -----------------------------------------------------------------
electricty_prices[1:12] <- electricty_prices[1:12] * 33.7 # converts from kWh to kWh equivalent of a gallon
fuel_df <- full_join(gas_prices, electricty_prices)
# Currently have each month as a given column: need to label columns
colnames(fuel_df)[1] <- "jan"
colnames(fuel_df)[2] <- "feb"
colnames(fuel_df)[3] <- "mar"
colnames(fuel_df)[4] <- "apr"
colnames(fuel_df)[5] <- "may"
colnames(fuel_df)[6] <- "jun"
colnames(fuel_df)[7] <- "jul"
colnames(fuel_df)[8] <- "aug"
colnames(fuel_df)[9] <- "sep"
colnames(fuel_df)[10] <- "oct"
colnames(fuel_df)[11] <- "nov"
colnames(fuel_df)[12] <- "dec"
# Wrangle data to include Model, fuel, veh_class, air pollution score, city mpg, highway mpg, greenhouse gas score
# Change names of columns with spaces
colnames(EV_GAS_data_raw)[11] <- "veh_class"
colnames(EV_GAS_data_raw)[12] <- "air_pollution_score"
colnames(EV_GAS_data_raw)[13] <- "city_mpge"
colnames(EV_GAS_data_raw)[14] <- "highway_mpge"
colnames(EV_GAS_data_raw)[15] <- "cmb_mpge"
colnames(EV_GAS_data_raw)[16] <- "greenhouse_gas_score"
# Select to Model, fuel, veh_class, air pollution score, city mpg, highway mpg, greenhouse gas score
EV_GAS_data <- EV_GAS_data_raw %>%
drop_na(city_mpge) %>%
filter(Fuel == "Gasoline" | Fuel == "Electricity") %>%
select(Model, Fuel, veh_class, air_pollution_score, city_mpge,
highway_mpge, cmb_mpge, greenhouse_gas_score) %>%
mutate(
city_mpge = as.numeric(city_mpge),
highway_mpge = as.numeric(highway_mpge),
greenhouse_gas_score = as.numeric(greenhouse_gas_score)
)
# To find average mpge for gas and electric
mpge_avg_fuel <- EV_GAS_data %>%
group_by(Fuel) %>%
summarise(mpge_avg = mean(cmb_mpge))
# Load Packages --------------------------------------------------------------
# Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day <- "2023-11-20"
pkgs <- c("readxl", "dplyr", "dbplyr", "ggplot2", "tidyverse", "knitr", "kableExtra")
groundhog.library(pkgs, groundhog.day)
# Read Data --------------------------------------------------------------------
gas_prices <- read_excel("bls_gas_prices.xlsx", range = "B11:M11", col_names = FALSE)
electricty_prices <- read_excel("bls_electricity_prices.xlsx", range = "B11:M11", col_names = FALSE)
EV_GAS_data_raw <- read_excel("all_alpha_24.xlsx")
# Wrangle Data -----------------------------------------------------------------
electricty_prices[1:12] <- electricty_prices[1:12] * 33.7 # converts from kWh to kWh equivalent of a gallon
fuel_df <- full_join(gas_prices, electricty_prices)
# Currently have each month as a given column: need to label columns
colnames(fuel_df)[1] <- "jan"
colnames(fuel_df)[2] <- "feb"
colnames(fuel_df)[3] <- "mar"
colnames(fuel_df)[4] <- "apr"
colnames(fuel_df)[5] <- "may"
colnames(fuel_df)[6] <- "jun"
colnames(fuel_df)[7] <- "jul"
colnames(fuel_df)[8] <- "aug"
colnames(fuel_df)[9] <- "sep"
colnames(fuel_df)[10] <- "oct"
colnames(fuel_df)[11] <- "nov"
colnames(fuel_df)[12] <- "dec"
# Wrangle data to include Model, fuel, veh_class, air pollution score, city mpg, highway mpg, greenhouse gas score
# Change names of columns with spaces
colnames(EV_GAS_data_raw)[11] <- "veh_class"
colnames(EV_GAS_data_raw)[12] <- "air_pollution_score"
colnames(EV_GAS_data_raw)[13] <- "city_mpge"
colnames(EV_GAS_data_raw)[14] <- "highway_mpge"
colnames(EV_GAS_data_raw)[15] <- "cmb_mpge"
colnames(EV_GAS_data_raw)[16] <- "greenhouse_gas_score"
# Select to Model, fuel, veh_class, air pollution score, city mpg, highway mpg, greenhouse gas score
EV_GAS_data <- EV_GAS_data_raw %>%
drop_na(city_mpge) %>%
filter(Fuel == "Gasoline" | Fuel == "Electricity") %>%
select(Model, Fuel, veh_class, air_pollution_score, city_mpge,
highway_mpge, cmb_mpge, greenhouse_gas_score) %>%
mutate(
city_mpge = as.numeric(city_mpge),
cmb_mpge, as.numeric(cmb_mpge),
highway_mpge = as.numeric(highway_mpge),
greenhouse_gas_score = as.numeric(greenhouse_gas_score)
)
# To find average mpge for gas and electric
mpge_avg_fuel <- EV_GAS_data %>%
group_by(Fuel) %>%
summarise(mpge_avg = mean(cmb_mpge))
View(EV_GAS_data)
# Select to Model, fuel, veh_class, air pollution score, city mpg, highway mpg, greenhouse gas score
EV_GAS_data <- EV_GAS_data_raw %>%
drop_na(city_mpge) %>%
filter(Fuel == "Gasoline" | Fuel == "Electricity") %>%
select(Model, Fuel, veh_class, air_pollution_score, city_mpge,
highway_mpge, cmb_mpge, greenhouse_gas_score) %>%
mutate(
city_mpge = as.numeric(city_mpge),
cmb_mpge, as.numeric(cmb_mpge),
highway_mpge = as.numeric(highway_mpge),
greenhouse_gas_score = as.numeric(greenhouse_gas_score)
)
# Load Packages --------------------------------------------------------------
# Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day <- "2023-11-20"
pkgs <- c("readxl", "dplyr", "dbplyr", "ggplot2", "tidyverse", "knitr", "kableExtra")
groundhog.library(pkgs, groundhog.day)
# Read Data --------------------------------------------------------------------
gas_prices <- read_excel("bls_gas_prices.xlsx", range = "B11:M11", col_names = FALSE)
electricty_prices <- read_excel("bls_electricity_prices.xlsx", range = "B11:M11", col_names = FALSE)
EV_GAS_data_raw <- read_excel("all_alpha_24.xlsx")
# Wrangle Data -----------------------------------------------------------------
electricty_prices[1:12] <- electricty_prices[1:12] * 33.7 # converts from kWh to kWh equivalent of a gallon
fuel_df <- full_join(gas_prices, electricty_prices)
# Currently have each month as a given column: need to label columns
colnames(fuel_df)[1] <- "jan"
colnames(fuel_df)[2] <- "feb"
colnames(fuel_df)[3] <- "mar"
colnames(fuel_df)[4] <- "apr"
colnames(fuel_df)[5] <- "may"
colnames(fuel_df)[6] <- "jun"
colnames(fuel_df)[7] <- "jul"
colnames(fuel_df)[8] <- "aug"
colnames(fuel_df)[9] <- "sep"
colnames(fuel_df)[10] <- "oct"
colnames(fuel_df)[11] <- "nov"
colnames(fuel_df)[12] <- "dec"
# Wrangle data to include Model, fuel, veh_class, air pollution score, city mpg, highway mpg, greenhouse gas score
# Change names of columns with spaces
colnames(EV_GAS_data_raw)[11] <- "veh_class"
colnames(EV_GAS_data_raw)[12] <- "air_pollution_score"
colnames(EV_GAS_data_raw)[13] <- "city_mpge"
colnames(EV_GAS_data_raw)[14] <- "highway_mpge"
colnames(EV_GAS_data_raw)[15] <- "cmb_mpge"
colnames(EV_GAS_data_raw)[16] <- "greenhouse_gas_score"
# Select to Model, fuel, veh_class, air pollution score, city mpg, highway mpg, greenhouse gas score
EV_GAS_data <- EV_GAS_data_raw %>%
drop_na(city_mpge) %>%
filter(Fuel == "Gasoline" | Fuel == "Electricity") %>%
select(Model, Fuel, veh_class, air_pollution_score, city_mpge, cmb_mpge,
highway_mpge, cmb_mpge, greenhouse_gas_score) %>%
mutate(
city_mpge = as.numeric(city_mpge),
cmb_mpge, as.numeric(cmb_mpge),
highway_mpge = as.numeric(highway_mpge),
greenhouse_gas_score = as.numeric(greenhouse_gas_score)
)
# To find average mpge for gas and electric
mpge_avg_fuel <- EV_GAS_data %>%
group_by(Fuel) %>%
summarise(mpge_avg = mean(cmb_mpge))
View(EV_GAS_data)
# Cases are cars with attributes: Model, fuel, vehicle class, air pollution score, city mpg, highway mpg, greenhouse gas score
EV_GAS_data <- EV_GAS_data_raw %>%
drop_na(city_mpge) %>%
filter(Fuel == "Gasoline" | Fuel == "Electricity") %>%
select(Model, Fuel, veh_class, air_pollution_score, city_mpge, highway_mpge, cmb_mpge, greenhouse_gas_score) %>%
mutate(
city_mpge = as.numeric(city_mpge),
highway_mpge = as.numeric(highway_mpge),
cmb_mpge = as.numeric(cmb_mpge),
greenhouse_gas_score = as.numeric(greenhouse_gas_score)
)
# To find average mpge for gas and electric
mpge_avg_fuel <- EV_GAS_data %>%
group_by(Fuel) %>%
summarise(mpge_avg = mean(cmb_mpge))
electricity_price_per_mile <- mpge_avg_fuel %>%
filter(Fuel == "Electricity") %>%
select(mpge_avg)
gas_price_per_mile <- mpge_avg_fuel %>%
filter(Fuel == "Gasoline") %>%
select(mpge_avg)
# Make sure they are numeric
electricity_avg_mpge <- as.numeric(electricity_price_per_mile)
gas_avg_mpge <- as.numeric(gas_price_per_mile)
# Add fuel type column to data frame
fuel_df$type <- c("gas", "electricity")
# Need to change cases to months
fuel_df <- fuel_df %>%
pivot_longer(
cols = c(jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec),
names_to = "month",
values_to = "avg_gallon_equaivalent_price"
)
# Making actual dates instead of character dates
dates <- append(
seq(from = as.Date("2022-01-01"), to = as.Date("2022-12-01"), by = "month"),
seq(from = as.Date("2022-01-01"), to = as.Date("2022-12-01"), by = "month")
)
# Add dates column to fuel_df
fuel_df$date <- dates
# do not need month column anymore, want to mutate from avg price per gallon to miles per dollar
fuel_df <- fuel_df %>%
select(type, avg_gallon_equaivalent_price, date) %>%
mutate(miles_per_dollar = case_when(
type == "gas" ~ gas_avg_mpge / avg_gallon_equaivalent_price,
type == "electricity" ~ electricity_avg_mpge / avg_gallon_equaivalent_price
)) %>%
select(date, type, miles_per_dollar)
# Make Line Graph ------------------------------------------------------------
miles_per_dollar_line_graph <- fuel_df %>%
ggplot(aes(x = date, y = miles_per_dollar, color = type)) +
geom_line() +
scale_y_continuous(n.breaks = 10, limits = c(0, 20)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs(
title = "Miles per Dollar by Month: Electricity Vs Gas",
subtitle = "Using 2024 vehicles and 2022 monthly fuel prices",
x = "Month", y = "Miles per Dollar", color = "Fuel Type"
) +
theme_bw()
# View Miles per Dollar Line Graph
miles_per_dollar_line_graph
source("C:/Users/owenm/Desktop/stat184FP/FP_OwenMcInerney_EricBest_AnirudhKumar/Q6MPG_EV_vs _GAS.R")
# Load Packages --------------------------------------------------------------
# Use groundhog to make sure the code runs mostly everywhere
library(groundhog)
groundhog.day <- "2023-11-20"
pkgs <- c("readxl", "dplyr", "dbplyr", "ggplot2", "tidyverse", "knitr", "kableExtra")
groundhog.library(pkgs, groundhog.day)
# Load Data ---------------------------------------------------------------
EV_GAS_data_raw <- read_excel("all_alpha_24.xlsx")
# Wrangle Data ---------------------------------------------------------------
# Wrangle data to include Model, fuel, veh_class, air pollution score, city mpg, highway mpg, greenhouse gas score
# Change names of columns with spaces
colnames(EV_GAS_data_raw)[11] <- "veh_class"
colnames(EV_GAS_data_raw)[12] <- "air_pollution_score"
colnames(EV_GAS_data_raw)[13] <- "city_mpge"
colnames(EV_GAS_data_raw)[14] <- "highway_mpge"
colnames(EV_GAS_data_raw)[15] <- "cmb_mpge"
colnames(EV_GAS_data_raw)[16] <- "greenhouse_gas_score"
# Cases are cars with attributes: Model, fuel, vehicle class, air pollution score, city mpg, highway mpg, greenhouse gas score
EV_GAS_data <- EV_GAS_data_raw %>%
drop_na(city_mpge) %>%
filter(Fuel == "Gasoline" | Fuel == "Electricity") %>%
select(Model, Fuel, veh_class, air_pollution_score, city_mpge, highway_mpge, cmb_mpge, greenhouse_gas_score) %>%
mutate(
city_mpge = as.numeric(city_mpge),
highway_mpge = as.numeric(highway_mpge),
cmb_mpge = as.numeric(cmb_mpge),
greenhouse_gas_score = as.numeric(greenhouse_gas_score)
)
# Make Box Plots / Greenhouse Summary Table ----------------------------------
# City MPG Box Plot
city_mpge_box_plot <- EV_GAS_data %>%
group_by(Fuel) %>%
ggplot(aes(x = Fuel, y = city_mpge, group = Fuel, fill = Fuel)) +
labs(title = "City MPGe EV vs Gas Box Plot", subtitle = "MPGe is Miles per Gallon equivalent", x = "Fuel", y = "MPGe") +
scale_y_continuous(n.breaks = 10, limits = c(0, max(EV_GAS_data$city_mpge))) +
geom_boxplot(
outlier.colour = "black", outlier.shape = 16,
outlier.size = 2, notch = FALSE
) +
theme_minimal()
# Highway MPG Box Plot
highway_mpge_box_plot <- EV_GAS_data %>%
group_by(Fuel) %>%
ggplot(aes(x = Fuel, y = highway_mpge, group = Fuel, fill = Fuel)) +
labs(title = "Highway MPGe EV vs Gas Box Plot", subtitle = "MPGe is Miles per Gallon equivalent", x = "Fuel", y = "MPGe") +
scale_y_continuous(n.breaks = 10, limits = c(0, max(EV_GAS_data$highway_mpge))) +
geom_boxplot(
outlier.colour = "black", outlier.shape = 16,
outlier.size = 2, notch = FALSE
) +
theme_minimal()
# Greenhouse Gas Score Summary Table
funx <- list(
min = ~ min(.x, na.rm = TRUE),
Q1 = ~ quantile(.x, probs = 0.20, na.rm = TRUE),
Q2 = ~ quantile(.x, probs = 0.40, na.rm = TRUE),
median = ~ median(.x, na.rm = TRUE),
Q3 = ~ quantile(.x, probs = 0.60, na.rm = TRUE),
Q4 = ~ quantile(.x, probs = 0.80, na.rm = TRUE),
max = ~ max(.x, na.rm = TRUE),
mean = ~ mean(.x, na.rm = TRUE),
std = ~ sd(.x, na.rm = TRUE)
)
green_house_gas_data <- EV_GAS_data %>%
group_by(Fuel) %>%
select(Fuel, greenhouse_gas_score) %>%
summarize(
across(
.cols = where(is.numeric),
.fns = funx
),
count = n()
)
greenhouse_gas_score_summary_table <- green_house_gas_data %>%
kable() %>%
kable_classic()
### View Data Visualizations ---------------------------------------------------
city_mpge_box_plot
highway_mpge_box_plot
greenhouse_gas_score_summary_table
